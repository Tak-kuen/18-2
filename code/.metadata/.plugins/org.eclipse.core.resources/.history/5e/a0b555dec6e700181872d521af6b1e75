package ch17.controller;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import ch11.logon.LogonDataBean;

public class ListProcessURI implements CommandProcess {

	@Override
	public String requestPro(HttpServletRequest request, HttpServletResponse response) throws Throwable {
		//DBCP에 접속한 뒤 사용자 정보를 모두 받아와서 ArrayList<Bean>으로 저장
		//어레이리스트를 리퀘스트에 붙여 포워딩할수있도록
		//request.setAttribute("members",list);
		ArrayList<LogonDataBean> list = new ArrayList<>();
		LogonDataBean bean;
		Context initCtx = new InitialContext();
		Context envCtx = (Context)initCtx.lookup("java:comp/env");
		DataSource ds = (DataSource)envCtx.lookup("jdbc/test");
		
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		
		try {
			conn=ds.getConnection();
			
			pstmt=conn.prepareStatement("select * from members");
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				bean.setName(rs.getString("name"));
				bean.setId(rs.getString("id"));
				bean.setAddress(rs.getString("address"));
					//비밀번호 오류
			//아이디가 존재할경우
				
			}else
				System.out.println("오류");
				
			//아이디가 없을경우
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(rs!=null) try { rs.close();} catch(SQLException ex) {}
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch
		
		
		request.setAttribute("message", "요청 URI로 명령어를 전달");
		return "/ch17/list.jsp";
	}

}
