//1501163 송탁근
package _1023SinglyLinkedList;

public class Ex6_1 {
	public static void main(String[] args) {
		LinkedList L = new LinkedList();
		System.out.println("(1) 공백 리스트에 노드 3개 삽입하기");
		L.insertLastNode("월");
		L.insertLastNode("수");
		L.insertLastNode("수");
		L.printList();
		
		System.out.println("(2) �� ��� �ڿ� �� ��� �����ϱ�");
		ListNode pre = L.searchNode("��");
		if(pre==null) {
			System.out.println("�˻�����>> ã�� �����Ͱ� �����ϴ�.");
		} else {
			L.insertMiddleNode(pre,"��");
			L.printList();
		}
		
		System.out.println("(3) ����Ʈ�� ��带 �������� �ٲٱ�");
		L.reverseList();
		L.printList();
		
		System.out.println("(4) ����Ʈ�� ������ ��� �����ϱ�");
		L.deleteLastNode();
		L.printList();
	}
}

class LinkedList{
	private ListNode head;
	public LinkedList() {
		head = null;
	}//Constructor
	
	public void insertMiddleNode(ListNode pre, String data) {
		ListNode newNode = new ListNode(data);
		newNode.link = pre.link;
		pre.link = newNode;
	}//insertMiddleNode
	
	public void insertLastNode(String data) {
		ListNode newNode = new ListNode(data);
		if(head==null) {
			this.head=newNode;
		} else {
			ListNode temp=head;
			while(temp.link !=null) {
				temp=temp.link;
			}//while
			temp.link=newNode;
		}//if-else
	}//insertLastNode
	
	public void deleteLastNode() {
		ListNode pre, temp;
		if(head==null) return;
		if(head.link ==null) {
			head=null;
		}else {
			pre=head;
			temp=head.link;
			while(temp.link!=null) {
				pre=temp;
				temp=temp.link;
			}//while
			pre.link=null;
		}//if-else
	}//deleteLastNode
	
	public ListNode searchNode(String data) {
		ListNode temp = this.head;
		while(temp !=null) {
			if(data==temp.getData()) {
				return temp;
			} else {
				temp=temp.link;
			}//if-else
		}//while
		return temp;
	}//searchNode
	
	public void reverseList() {
		ListNode next=head;
		ListNode current = null;
		ListNode pre =null;
		while(next!=null) {
			pre=current;
			current=next;
			next=next.link;
			current.link=pre;
		}//while
		head=current;
	}//reverseList
	
	public void printList() {
		ListNode temp=this.head;
		System.out.printf("L = (");
		while(temp!=null) {
			System.out.printf(temp.getData());
			temp=temp.link;
			if(temp !=null) {
				System.out.printf(", ");
			}//if
		}//while
		System.out.println(")");
	}//printList
}//LinkedList

class ListNode {
	private String data;
	public ListNode link;
	public ListNode() {
		this.data = null;
		this.link = null;
	}
	
	public ListNode(String data) {
		this.data = data;
		this.link = null;
	}
	public ListNode(String data, ListNode link) {
		this.data = data;
		this.link = link;
	}
	//Constructor OverLoading
	public String getData() {
		return this.data;
	}
}