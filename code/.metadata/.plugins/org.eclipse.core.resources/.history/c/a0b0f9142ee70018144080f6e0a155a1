package ch11.logon;

import java.sql.*;

import javax.sql.*;
import javax.naming.*;

public class LogonDBBean {
	
	//싱글톤 DB빈 생성
	private static LogonDBBean instance = new LogonDBBean();//무조건 한번은 생성되는 객체
	public static LogonDBBean getInstance() {	return instance;}//
	private LogonDBBean() {}//없으면 getInstance()와 new로 생성 둘다 가능해짐
	
	//커넥션풀에서 커넥션 객체를 얻어내는 메소드
	private Connection getConnection() throws Exception{
		Context initCtx = new InitialContext();
		Context envCtx = (Context)initCtx.lookup("java:comp/env");
		DataSource ds = (DataSource)envCtx.lookup("jdbc/test");
		
		return ds.getConnection();
	}
	
	//회원가입 처리
	public void insertMember(LogonDataBean member) {
		Connection conn=null;
		PreparedStatement pstmt=null;
		
		try {
			conn=getConnection();
			
			pstmt=conn.prepareStatement("insert into members values(?,?,?,?,?,?)");
			pstmt.setString(1, member.getId());
			pstmt.setString(2, member.getPasswd());
			pstmt.setString(3, member.getName());
			pstmt.setTimestamp(4, member.getReg_date());
			pstmt.setString(5, member.getAddress());
			pstmt.setString(6, member.getTel());
			pstmt.executeUpdate();
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch	
	}//insertMember
	
	public int userCheck(String id, String passwd) {	
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int result = -1;
		
		try {
			conn=getConnection();
			
			pstmt=conn.prepareStatement("select passwd from members where id=?");
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				String dbpasswd = rs.getString("passwd");
				if(dbpasswd.equals(passwd)) {
					result=1;
				}else
					result=0;//비밀번호 오류
			//아이디가 존재할경우
				
			}else
				result=-1;
			//아이디가 없을경우
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(rs!=null) try { rs.close();} catch(SQLException ex) {}
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch
		
		return result;
	}//userCheck
	
	public int confirmId(String id) {
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int result = -1;
		
		try {
			conn=getConnection();
			pstmt=conn.prepareStatement("select id from members where id=?");
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				result=1;	//�ߺ����̵� ����
			}else {
				result=-1;	//�ߺ����̵� ����
			}
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(rs!=null) try { rs.close();} catch(SQLException ex) {}
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch
		
		return result;
	}//confirmId
	
	public LogonDataBean getMember(String id, String passwd) {
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		LogonDataBean member=null;
		
		try {
			conn=getConnection();
			
			pstmt=conn.prepareStatement("select * from members where id=?");
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				String dbpasswd=rs.getString("passwd");
				if(dbpasswd.equals(passwd)) {
					member=new LogonDataBean();
					member.setId(rs.getString("id"));
					member.setName(rs.getString("name"));
					member.setReg_date(rs.getTimestamp("reg_date"));
					member.setAddress(rs.getString("address"));
					member.setTel(rs.getString("tel"));
				}//조회된 데이터를 데이터빈에 저장
			}
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(rs!=null) try { rs.close();} catch(SQLException ex) {}
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch
		
		return member;//저장된 데이터 빈을 리턴
	}//getMember();
	
	public int updateMember(LogonDataBean member) {
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int result = -1;
		
		try {
			conn=getConnection();
			
			pstmt=conn.prepareStatement("select passwd from members where id=?");
			pstmt.setString(1, member.getId());
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				String dbpasswd = rs.getString("passwd");
				if(member.getPasswd().equals(dbpasswd)) {
					pstmt=conn.prepareStatement("update members set name=?,address=?,tel=? where id=?");
					pstmt.setString(1, member.getName());
					pstmt.setString(2, member.getAddress());
					pstmt.setString(3, member.getTel());
					pstmt.setString(4, member.getId());
					pstmt.executeUpdate();
					result=1;		//정보수정 성공
				}else	result=0;	//정보수정 실패
			}// rs.next
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(rs!=null) try { rs.close();} catch(SQLException ex) {}
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch
		
		return result;
	}//updateMember
	
	public int deleteMemeber(String id, String passwd) {
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int result = -1;
		
		try {
			conn=getConnection();
			
			pstmt=conn.prepareStatement("select passwd from members where id=?");
			pstmt.setString(1, id);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				String dbpasswd = rs.getString("passwd");
				if(passwd.equals(dbpasswd)) {
					pstmt=conn.prepareStatement("delete from members where id=?");
					pstmt.setString(1,id);
					pstmt.executeUpdate();
					result=1;		//Ż�� ����
				}else	result=0;	//Ż�� ����
			}//rs.next
		} catch (Exception ex) {
			ex.printStackTrace();	
		} finally {
			if(rs!=null) try { rs.close();} catch(SQLException ex) {}
			if(pstmt!=null) try { pstmt.close();} catch(SQLException ex) {}
			if(conn!=null) try { conn.close();} catch(SQLException ex) {}
		}//try-catch
		
		return result;
	}//deleteMember
	
}
